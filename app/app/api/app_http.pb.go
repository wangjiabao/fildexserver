// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: app/app/api/app.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppFilUsdt = "/api.App/FilUsdt"

type AppHTTPServer interface {
	FilUsdt(context.Context, *FilUsdtRequest) (*FilUsdtReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/app_server/fil_usdt", _App_FilUsdt0_HTTP_Handler(srv))
}

func _App_FilUsdt0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FilUsdtRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppFilUsdt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FilUsdt(ctx, req.(*FilUsdtRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FilUsdtReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	FilUsdt(ctx context.Context, req *FilUsdtRequest, opts ...http.CallOption) (rsp *FilUsdtReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) FilUsdt(ctx context.Context, in *FilUsdtRequest, opts ...http.CallOption) (*FilUsdtReply, error) {
	var out FilUsdtReply
	pattern := "/api/app_server/fil_usdt"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppFilUsdt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
