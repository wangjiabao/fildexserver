// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: app/app/api/app.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppDfilLog = "/api.App/DfilLog"
const OperationAppFilUsdt = "/api.App/FilUsdt"
const OperationAppGetPerSecondDFilTotal = "/api.App/GetPerSecondDFilTotal"
const OperationAppGetPerSecondPairInfo = "/api.App/GetPerSecondPairInfo"
const OperationAppReqContract = "/api.App/ReqContract"
const OperationAppSetOwnerInfo = "/api.App/SetOwnerInfo"
const OperationAppSetPerSecondDFilTotal = "/api.App/SetPerSecondDFilTotal"
const OperationAppSetPerSecondPairInfo = "/api.App/SetPerSecondPairInfo"

type AppHTTPServer interface {
	DfilLog(context.Context, *DfilLogRequest) (*DfilLogReply, error)
	FilUsdt(context.Context, *FilUsdtRequest) (*FilUsdtReply, error)
	GetPerSecondDFilTotal(context.Context, *GetPerSecondDFilTotalRequest) (*GetPerSecondDFilTotalReply, error)
	GetPerSecondPairInfo(context.Context, *GetPerSecondPairInfoRequest) (*GetPerSecondPairInfoReply, error)
	ReqContract(context.Context, *ReqContractRequest) (*ReqContractReply, error)
	SetOwnerInfo(context.Context, *SetOwnerInfoRequest) (*SetOwnerInfoReply, error)
	SetPerSecondDFilTotal(context.Context, *SetPerSecondDFilTotalRequest) (*SetPerSecondDFilTotalReply, error)
	SetPerSecondPairInfo(context.Context, *SetPerSecondPairInfoRequest) (*SetPerSecondPairInfoReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/app_server/fil_usdt", _App_FilUsdt0_HTTP_Handler(srv))
	r.GET("/api/app_server/set_per_second_dfil_total", _App_SetPerSecondDFilTotal0_HTTP_Handler(srv))
	r.GET("/api/app_server/get_per_second_dfil_total", _App_GetPerSecondDFilTotal0_HTTP_Handler(srv))
	r.GET("/api/app_server/set_per_second_pair_info", _App_SetPerSecondPairInfo0_HTTP_Handler(srv))
	r.GET("/api/app_server/get_per_second_pair_info", _App_GetPerSecondPairInfo0_HTTP_Handler(srv))
	r.GET("/api/app_server/req_contract", _App_ReqContract0_HTTP_Handler(srv))
	r.GET("/api/app_server/dfil_log", _App_DfilLog0_HTTP_Handler(srv))
	r.POST("/api/app_server/set_owner_info", _App_SetOwnerInfo0_HTTP_Handler(srv))
}

func _App_FilUsdt0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FilUsdtRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppFilUsdt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FilUsdt(ctx, req.(*FilUsdtRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FilUsdtReply)
		return ctx.Result(200, reply)
	}
}

func _App_SetPerSecondDFilTotal0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetPerSecondDFilTotalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSetPerSecondDFilTotal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetPerSecondDFilTotal(ctx, req.(*SetPerSecondDFilTotalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetPerSecondDFilTotalReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetPerSecondDFilTotal0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPerSecondDFilTotalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetPerSecondDFilTotal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPerSecondDFilTotal(ctx, req.(*GetPerSecondDFilTotalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPerSecondDFilTotalReply)
		return ctx.Result(200, reply)
	}
}

func _App_SetPerSecondPairInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetPerSecondPairInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSetPerSecondPairInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetPerSecondPairInfo(ctx, req.(*SetPerSecondPairInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetPerSecondPairInfoReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetPerSecondPairInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPerSecondPairInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetPerSecondPairInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPerSecondPairInfo(ctx, req.(*GetPerSecondPairInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPerSecondPairInfoReply)
		return ctx.Result(200, reply)
	}
}

func _App_ReqContract0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqContractRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppReqContract)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReqContract(ctx, req.(*ReqContractRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReqContractReply)
		return ctx.Result(200, reply)
	}
}

func _App_DfilLog0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DfilLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDfilLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DfilLog(ctx, req.(*DfilLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DfilLogReply)
		return ctx.Result(200, reply)
	}
}

func _App_SetOwnerInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetOwnerInfoRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppSetOwnerInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetOwnerInfo(ctx, req.(*SetOwnerInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetOwnerInfoReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	DfilLog(ctx context.Context, req *DfilLogRequest, opts ...http.CallOption) (rsp *DfilLogReply, err error)
	FilUsdt(ctx context.Context, req *FilUsdtRequest, opts ...http.CallOption) (rsp *FilUsdtReply, err error)
	GetPerSecondDFilTotal(ctx context.Context, req *GetPerSecondDFilTotalRequest, opts ...http.CallOption) (rsp *GetPerSecondDFilTotalReply, err error)
	GetPerSecondPairInfo(ctx context.Context, req *GetPerSecondPairInfoRequest, opts ...http.CallOption) (rsp *GetPerSecondPairInfoReply, err error)
	ReqContract(ctx context.Context, req *ReqContractRequest, opts ...http.CallOption) (rsp *ReqContractReply, err error)
	SetOwnerInfo(ctx context.Context, req *SetOwnerInfoRequest, opts ...http.CallOption) (rsp *SetOwnerInfoReply, err error)
	SetPerSecondDFilTotal(ctx context.Context, req *SetPerSecondDFilTotalRequest, opts ...http.CallOption) (rsp *SetPerSecondDFilTotalReply, err error)
	SetPerSecondPairInfo(ctx context.Context, req *SetPerSecondPairInfoRequest, opts ...http.CallOption) (rsp *SetPerSecondPairInfoReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) DfilLog(ctx context.Context, in *DfilLogRequest, opts ...http.CallOption) (*DfilLogReply, error) {
	var out DfilLogReply
	pattern := "/api/app_server/dfil_log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDfilLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) FilUsdt(ctx context.Context, in *FilUsdtRequest, opts ...http.CallOption) (*FilUsdtReply, error) {
	var out FilUsdtReply
	pattern := "/api/app_server/fil_usdt"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppFilUsdt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetPerSecondDFilTotal(ctx context.Context, in *GetPerSecondDFilTotalRequest, opts ...http.CallOption) (*GetPerSecondDFilTotalReply, error) {
	var out GetPerSecondDFilTotalReply
	pattern := "/api/app_server/get_per_second_dfil_total"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGetPerSecondDFilTotal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetPerSecondPairInfo(ctx context.Context, in *GetPerSecondPairInfoRequest, opts ...http.CallOption) (*GetPerSecondPairInfoReply, error) {
	var out GetPerSecondPairInfoReply
	pattern := "/api/app_server/get_per_second_pair_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGetPerSecondPairInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ReqContract(ctx context.Context, in *ReqContractRequest, opts ...http.CallOption) (*ReqContractReply, error) {
	var out ReqContractReply
	pattern := "/api/app_server/req_contract"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppReqContract))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) SetOwnerInfo(ctx context.Context, in *SetOwnerInfoRequest, opts ...http.CallOption) (*SetOwnerInfoReply, error) {
	var out SetOwnerInfoReply
	pattern := "/api/app_server/set_owner_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppSetOwnerInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) SetPerSecondDFilTotal(ctx context.Context, in *SetPerSecondDFilTotalRequest, opts ...http.CallOption) (*SetPerSecondDFilTotalReply, error) {
	var out SetPerSecondDFilTotalReply
	pattern := "/api/app_server/set_per_second_dfil_total"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppSetPerSecondDFilTotal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) SetPerSecondPairInfo(ctx context.Context, in *SetPerSecondPairInfoRequest, opts ...http.CallOption) (*SetPerSecondPairInfoReply, error) {
	var out SetPerSecondPairInfoReply
	pattern := "/api/app_server/set_per_second_pair_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppSetPerSecondPairInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
